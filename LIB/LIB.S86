; T3X86 runtime library
; Nils M Holm, 2000,2019,2021
; Humberto Costa dos Santos Junior, 2022
; Public Domain / 0BSD license

	.text   $100

	jmp     start

	; The following definitions MUST start at 0103h
	; and MUST be kept in this order!

rtlen:  dw      offset end      ; 0x0103 module length for mklib.t
	db      "T3X"           ; 0x0105

	jmp     t_bpw           ; 0x0108
	jmp     t_newline       ; 0x010b
	jmp     t_memcomp       ; 0x010e
	jmp     t_memcopy       ; 0x0111
	jmp     t_memfill       ; 0x0114
	jmp     t_memscan       ; 0x0117
	jmp     t_getarg        ; 0x011a
	jmp     t_open          ; 0x011d
	jmp     t_close         ; 0x0120
	jmp     t_read          ; 0x0123
	jmp     t_write         ; 0x0126
	jmp     t_rename        ; 0x0129
	jmp     t_remove        ; 0x012c
	jmp     cmp_eq          ; 0x012f
	jmp     cmp_ne          ; 0x0132
	jmp     cmp_lt          ; 0x0135
	jmp     cmp_gt          ; 0x0138
	jmp     cmp_le          ; 0x013b
	jmp     cmp_ge          ; 0x013e
	jmp     t_seek          ; 0x0141
	jmp     cmp_ult         ; 0x0144
	jmp     cmp_ugt         ; 0x0147
	jmp     cmp_ule         ; 0x014a
	jmp     cmp_uge         ; 0x014d
	jmp     t_farcomp       ; 0x0150
	jmp     t_farcopy       ; 0x0153
	jmp     t_farfill       ; 0x0156
	jmp     t_farscan       ; 0x0159
	jmp     t_fargetb       ; 0x015c
	jmp     t_farsetb       ; 0x015f
	jmp     t_fargetw       ; 0x0162
	jmp     t_farsetw       ; 0x0165
	jmp     t_local         ; 0x0168
	jmp     t_outb          ; 0x016b
	jmp     t_inb           ; 0x016e
	jmp     t_outw          ; 0x0171
	jmp     t_inw           ; 0x0174
	jmp     t_int86c        ; 0x0177
	jmp     t_int86ax       ; 0x017a
	jmp     t_int86z        ; 0x017d
	jmp     t_setptr        ; 0x0180
	jmp     t_getseg        ; 0x0183
	jmp     t_getoff        ; 0x0186
	jmp 	t_stack			; 0x0189
	jmp 	t_getflags		; 0x018c
	jmp		t_setflags		; 0x018f
	jmp 	t_jmpstack		; 0x0192
	jmp 	t_stackptr		; 0x0195
	jmp 	t_instrptr		; 0x0198
	jmp 	t_bochsbrk		; 0x019b


; Call frame layout
;
; +-----------------+
; | argument 1      | <-- BP+2+2N
; +-----------------+
; | ...             |
; +-----------------+
; | argument N      | <-- BP+4
; +-----------------+
; | saved frame     |
; +-----------------+
; | return address  | <-- BP, SP
; +-----------------+

; T.BPW()
; Return bytes per word on target machine.

t_bpw:
	mov     ax,2
	ret

; T.BOCHSBRK()
; Magic breakpoint on BOCHS emulator
t_bochsbrk:
	xchg 	bx,bx
	ret

; T.STACKPTR()
; Return stack pointer

t_stackptr:
	mov     ax,sp
	add 	ax,2
	ret

; T.INSTRPTR()
; Return intruction pointer of exit of this function

t_instrptr:
	pop		ax
	push	ax
	ret

; T.GETFLAGS()
; Return FLAGS contents
t_getflags:
	pushf
	pop 	ax
	ret

; T.SETFLAGS(FLAGS)
; Set FLAGS contents
t_setflags:
	push	bp
	mov 	bp,sp
	mov		ax,[bp+4]
	push 	ax
	popf
	pop 	bp
	ret

; T.JMPSTACK(SEG, TOP_STACK, EXEC)
; Jump far using independent stack and segment
t_jmpstack:
	push 	bp
	mov		bp,sp
	push	ds
	push	es
	mov		ax,[bp+8]
	mov		bx,[bp+6]
	mov		cx,[bp+4]
	cli
	mov 	ss,ax
	mov 	ds,ax
	mov 	es,ax
	mov		sp,bx
	push 	ax
	push	cx
	sti
	retf

; T.SETPTR(PTR, SEG, OFFSET)
; Set pointer on PTR[4]

t_setptr:
    push    bp
    mov     bp,sp
    mov     si,[bp+8]
    mov     ax,[bp+4]
    mov     [si],ax
    mov     ax,[bp+6]
    mov     [si+2],ax
    xor     ax,ax
    pop     bp
    ret

; T.GETSEG(PTR)
; Get segment from PTR[4]

t_getseg:
    push    bp
    mov     bp,sp
    mov     si,[bp+4]
    mov     ax,[si+2]
    pop     bp
    ret

; T.GETOFF(PTR)
; Get offset from PTR[4]

t_getoff:
    push    bp
    mov     bp,sp
    mov     si,[bp+4]
    mov     ax,[si]
    pop     bp
    ret

; T.INT86C(INT, AX, BX, CX, DX, SI, DI)
; Call interrupt and return CF

t_int86c:
    push    bp
    mov     bp,sp
    mov     ax,[bp+16]
    mov     si,@intcptr
    cseg
    mov     [si],al
    mov     ax,[bp+14]
    mov     bx,[bp+12]
    mov     cx,[bp+10]
    mov     dx,[bp+8]
    mov     si,[bp+6]
    mov     di,[bp+4]
    db      $CD
intcptr:
    db      0
    jc      intcyes
    xor     ax,ax
    jmp     intcend
intcyes:
    mov     ax,1
intcend:
    pop     bp
    ret

; T.INT86AX(INT, AX, BX, CX, DX, SI, DI)
; Call interrupt and return AX

t_int86ax:
    push    bp
    mov     bp,sp
    mov     ax,[bp+16]
    mov     si,@intaxptr
    cseg
    mov     [si],al
    mov     ax,[bp+14]
    mov     bx,[bp+12]
    mov     cx,[bp+10]
    mov     dx,[bp+8]
    mov     si,[bp+6]
    mov     di,[bp+4]
    db      $CD
intaxptr:
    db      0
    pop     bp
    ret

; T.INT86Z(INT, AX, BX, CX, DX, SI, DI)
; Call interrupt and return ZF

t_int86z:
    push    bp
    mov     bp,sp
    mov     ax,[bp+16]
    mov     si,@intzptr
    cseg
    mov     [si],al
    mov     ax,[bp+14]
    mov     bx,[bp+12]
    mov     cx,[bp+10]
    mov     dx,[bp+8]
    mov     si,[bp+6]
    mov     di,[bp+4]
    db      $CD
intzptr:
    db      0
    jz      intzyes
    xor     ax,ax
    jmp     intzend
intzyes:
    mov     ax,1
intzend:
    pop     bp
    ret

; T.OUTB(PORT, VALUE)
; Write VALUE in PORT

t_outb:
    push    bp
    mov     bp,sp
    mov     dx,[bp+6]
    mov     al,[bp+4]
    outb 
    pop     bp
    ret

; T.INB(PORT)
; Return value from PORT

t_inb:
    push    bp
    mov     bp,sp
    mov     dx,[bp+4]
    xor     ax,ax
    inb
    pop     bp
    ret

; T.OUTW(PORT, VALUE)
; Write VALUE in PORT

t_outw:
    push    bp
    mov     bp,sp
    mov     dx,[bp+6]
    mov     ax,[bp+4]
    outw
    pop     bp
    ret

; T.INW(PORT)
; Return value from PORT

t_inw:
    push    bp
    mov     bp,sp
    mov     dx,[bp+4]
    inw
    pop     bp
    ret

; T.FARGETB(SEG, P)
; Return byte in SEG:P position

t_fargetb:
    push    bp
    mov     bp,sp
    push    ds
    mov     ax,[bp+6]
    mov     ds,ax
    mov     bx,[bp+4]
    xor     ax,ax
    mov     al,[bx]
    pop     ds
    pop     bp
    ret

; T.FARSETB(SEG, P, VALUE)
; Set byte in SEG:P position

t_farsetb:
    push    bp
    mov     bp,sp
    push    ds
    mov     ax,[bp+8]
    mov     ds,ax
    mov     bx,[bp+6]
    mov     al,[bp+4]
    mov     [bx],al
    xor     ax,ax
    pop     ds
    pop     bp
    ret

; T.FARGETW(SEG, P)
; Return word in SEG:P position

t_fargetw:
    push    bp
    mov     bp,sp
    push    ds
    mov     ax,[bp+6]
    mov     ds,ax
    mov     bx,[bp+4]
    mov     ax,[bx]
    pop     ds
    pop     bp
    ret

; T.FARSETW(SEG, P, VALUE)
; Set word in SEG:P position

t_farsetw:
    push    bp
    mov     bp,sp
    push    ds
    mov     ax,[bp+8]
    mov     ds,ax
    mov     bx,[bp+6]
    mov     ax,[bp+4]
    mov     [bx],ax
    xor     ax,ax
    pop     ds
    pop     bp
    ret

; T.LOCAL()
; Return local segment

t_local:
    mov     ax, cs
    ret

; T.STACK()
; Return stack segment

t_stack:
    mov     ax, ss
    ret

; T.NEWLINE(B)
; Fill B with newline sequence.

t_newline:
	push    bp
	mov     bp,sp
	mov     di,[bp+4]
	cld
	mov     al,$0D
	stosb
	mov     al,$0A
	stosb
	xor     al,al
	stosb
	mov     ax,[bp+4]
	pop     bp
	ret

; T.FARCOMP(SEG1, R1, SEG2, R2, N)
; Compare regions SEG1:R1 and SEG2:R2 of size N,
; return difference between first differing
; pair of bytes; return 0 if SEG1:R1=SEG2:R2

t_farcomp:
    push    bp
    mov     bp,sp
    push    ds
    push    es
    mov     ax,[bp+12]          ; seg1
    mov     ds,ax
    mov     ax,[bp+10]          ; r1
    push    ax
    mov     ax,[bp+8]           ; seg2
    mov     es,ax
    mov     ax,[bp+6]           ; r2
    push    ax
    mov     ax,[bp+4]           ; n
    push    ax
    call    t_memcomp
    add     sp,6
    pop     es
    pop     ds
    pop     bp
    ret

; T.MEMCOMP(R1, R2, N)
; Compare regions R1 and R2 of size N,
; return difference between first differing
; pair of bytes; return 0 if R1=R2

t_memcomp:
	push    bp
	mov     bp,sp
	mov     di,[bp+8]       ; r1
	mov     si,[bp+6]       ; r2
	mov     cx,[bp+4]       ; len
	cmp     si,di
	jnz     docmp
	xor     ax,ax
	jmps    cmpret
docmp:  inc     cx
	cld
	repz
	cmpsb
	or      cx,cx
	jnz     notequ
	xor     ax,ax
	jmps    cmpret
notequ: mov     al,[di-1]
	sub     al,[si-1]
	cbw
cmpret: pop     bp
	ret

; T.FARCOPY(SEGD, DEST, SEGS, SRC, N)
; Copy N bytes from SEGS:SRC to SEGD:DEST;
; regions may overlap.

t_farcopy:
    push    bp
    mov     bp,sp
    push    ds
    push    es
    mov     ax,[bp+12]          ; segd
    mov     es,ax
    mov     di,[bp+10]          ; dest
    mov     ax,[bp+8]           ; segs
    mov     ds,ax
    mov     si,[bp+6]           ; src
    mov     cx,[bp+4]           ; n
	cld
	rep
	movsb  
    pop     es
    pop     ds
    pop     bp
    ret

; T.MEMCOPY(DEST, SRC, N)
; Copy N bytes from SRC to DEST;
; regions may overlap.

t_memcopy:
	push    bp
	mov     bp,sp
	mov     di,[bp+8]       ; dest
	mov     si,[bp+6]       ; src
	mov     cx,[bp+4]       ; len
	cld
	cmp     di,si
	jz      endmove         ; src == dest
domove: jb      nmove           ; src < dest ==> normal move
	std
	add     si,cx           ; start at the end
	add     di,cx           ; for reverse copy
	dec     si
	dec     di
nmove:  rep
	movsb                   ; doit
endmove:pop     bp
	xor     ax,ax
	ret

; T.FARFILL(SEG, R, C, N)
; Fill N bytes starting at SEG:R with C.

t_farfill:
	push    bp
	mov     bp,sp
	push    es
	mov     ax,[bp+10]      ; seg
	mov     es, ax
	mov     di,[bp+8]       ; r
	mov     ax,[bp+6]       ; c
	mov     cx,[bp+4]       ; n
	cld
	rep
	stosb
	pop     es
	pop     bp
	xor     ax,ax
	ret

; T.MEMFILL(R, C, N)
; Fill N bytes starting at R with C.

t_memfill:
	push    bp
	mov     bp,sp
	mov     di,[bp+8]       ; r
	mov     ax,[bp+6]       ; c
	mov     cx,[bp+4]       ; n
	cld
	rep
	stosb
	pop     bp
	xor     ax,ax
	ret

; T.FARSCAN(SEG, R, C, N)
; Find first byte C in region SEG:R of size N;
; return offset of the byte or -1, if C is not in R.

t_farscan:
	push    bp
	mov     bp,sp
	push    ds
	mov     ax,[bp+10]      ; seg
	mov     ds, ax
	mov     di,[bp+8]       ; r
	mov     dx,di
	mov     ax,[bp+6]       ; c
	mov     cx,[bp+4]       ; n
	inc     cx
	cld
	repnz
	scasb
	or      cx,cx
	jz      fnotfnd
	mov     ax,di
	sub     ax,dx
	dec     ax
	jmps    fscnret
fnotfnd:mov     ax,-1
fscnret:pop     ds
	pop     bp
	ret

; T.MEMSCAN(R, C, N)
; Find first byte C in region R of size N;
; return offset of the byte or -1, if C is not in R.

t_memscan:
	push    bp
	mov     bp,sp
	mov     di,[bp+8]       ; r
	mov     dx,di
	mov     ax,[bp+6]       ; c
	mov     cx,[bp+4]       ; n
	inc     cx
	cld
	repnz
	scasb
	or      cx,cx
	jz      notfnd
	mov     ax,di
	sub     ax,dx
	dec     ax
	jmps    scnret
notfnd: mov     ax,-1
scnret: pop     bp
	ret

; T.GETARG(A, BUF, N)
; Extract up to N-1 characters from A'th command line argument,
; store the characters in BUF and append a delimiting NUL char.
; Return the number of characters extracted (excluding the NUL).

t_getarg:
	push    bp
	mov     bp,sp
	mov     cx,[bp+8]       ; n
	dec     cx
	mov     si,$82          ; ptr to command line + 1
	cld
nskas:  dec     si              ; skip over next argument spaces
skas:   lodsb                   ; skip over argument spaces
	cmp     al,$20
	jz      skas
	cmp     al,$09
	jz      skas
	cmp     al,$0D          ; end of command line
	jnz     gtarg2
	mov     ax,-1
	jmps    endgetarg
gtarg2: or      cx,cx           ; extract this argument?
	jz      gtarg3
	dec     cx
ska:    lodsb                   ; skip over argument
	cmp     al,$20
	jz      nskas
	cmp     al,$09
	jz      nskas
	cmp     al,$0D
	jz      nskas
	jmps    ska
gtarg3: mov     di,[bp+6]       ; buf
	mov     cx,[bp+4]       ; len
	xor     bx,bx
tra:    inc     bx
	cmp     bx,cx
	jae     endtra
	stosb                   ; transfer argument
	lodsb
	cmp     al,$20
	jz      endtra
	cmp     al,$09
	jz      endtra
	cmp     al,$0D
	jz      endtra
	jmps    tra
endtra: xor     ax,ax
	stosb
	mov     ax,bx
endgetarg:
	pop     bp
	ret

; T.OPEN(NAME, MODE)
; Open file NAME.
; If MODE=0 open existing file for reading.
; If MODE=1 erase and create file.
; MODE=2 unsupported
; MODE=3 = MODE=0 and move to EOF.

t_open:
	push    bp
	mov     bp,sp
	mov     ax,[bp+4]       ;; mode
	cmp     ax,1
	jnz     mode023
	mov     ax,$3C00        ; DOS: create file
	mov     dx,[bp+6]       ; file
	xor     cx,cx
	int     $21
	jnc     opened
	mov     ax,-1
	jmps    endopen
mode023:
	cmp     ax,0
	jz      doopen
	cmp     ax,3
	jz      doopen3
	mov     ax,-1
	jmps    endopen
doopen3:
	mov     ax,2
doopen:
	or      ax,$3D00        ; DOS: open file
	mov     dx,[bp+6]       ; file
	int     $21
	jnc     opened
	mov     ax,-1
	jmps    endopen
opened: cmp     ax,0
	jge     opened2
	mov     ax,-1
	jmps    endopen
opened2:
	mov     bx,[bp+4]       ; mode
	cmp     bx,3
	jnz     endopen
	push    ax
	mov     bx,ax
	mov     ax,$4202        ; DOS: move file ptr from EOF
	xor     cx,cx
	xor     dx,dx
	int     $21
	pop     ax
	jnc     endopen
	mov     ax,-1
endopen:
	pop     bp
	ret

; T.CLOSE(FD)
; Close file descriptor.

t_close:
	push    bp
	mov     bp,sp
	mov     bx,[bp+4]       ;; fd
	mov     ax,$3E00        ; DOS: close file
	int     $21
	jnc     closeok
	mov     ax,-1
	jmps    endclose
closeok:
	xor     ax,ax
endclose:
	pop     bp
	ret

; T.READ(FD, BUF, N)
; Read up to N bytes from FD into BUF.

t_read:
	push    bp
	mov     bp,sp
	mov     ax,$3F00        ; DOS: read block
	mov     bx,[bp+8]       ; fd
	mov     dx,[bp+6]       ; buf
	mov     cx,[bp+4]       ; len
	int     $21
	jnc     endread
	mov     ax,-1
endread:
	pop     bp
	ret


; T.WRITE(FD, BUF, N)
; WRITE N bytes from BUF to FD.

t_write:
	push    bp
	mov     bp,sp
	mov     ax,$4000        ; DOS: read block
	mov     bx,[bp+8]       ; fd
	mov     dx,[bp+6]       ; buf
	mov     cx,[bp+4]       ; len
	int     $21
	jnc     endwrite
	mov     ax,-1
endwrite:
	pop     bp
	ret


; T.SEEK(FD, WHERE, HOW)
; Seek to position WHERE in file FD.
; HOW=0, absolute from beginning
; HOW=1, relative from beginning
; HOW=2, absolute from end
; HOW=3, relative from end
; Return 0=success or -1=failure.

t_seek:
	push    bp
	mov     bp,sp
	mov     dx,[bp+6]       ; where
	xor     cx,cx
	mov     ax,[bp+4]       ; how
	or      ax,ax           ; T3X.SEEK_SET
	jnz     seek1
	mov     ax,$4200        ; DOS: move file pointer, absolute
	jmps    goseek
seek1:  cmp     ax,1            ; T3X.SEEK_FWD
	jnz     seek2
	mov     ax,$4201        ; DOS: move file pointer, relative
	jmp     goseek
seek2:  cmp     ax,2            ; T3X.SEEK_END
	jnz     seek3
	mov     ax,$4202        ; DOS: move file pointer, from EOF
	neg     dx              ; negative offset
	dec     cx
	jmps    goseek
seek3:  cmp     ax,3            ; T3X.SEEK_BCK
	jnz     skfail
	mov     ax,$4201        ; DOS: move file pointer, relative
	neg     dx              ; negative offset
	dec     cx
goseek:
	mov     bx,[bp+8]       ; fd
	int     $21
	jc      skfail
	xor     ax,ax
	jmps    skok
skfail: mov     ax,-1
skok:   pop     bp
	ret


; T.RENAME(OLD, NEW)
; Rename file OLD as NEW.
; Fail if OLD does not exist or NEW does exist.
; Return 0=success or -1=failure.

t_rename:
	push    bp
	mov     bp,sp
	mov     ax,$5600        ; DOS: rename
	mov     dx,[bp+6]       ;; old
	mov     di,[bp+4]       ;; new
	int     $21
	jnc     renok
	mov     ax,-1
	jmps    endrename
renok:
	xor     ax,ax
endrename:
	pop     bp
	ret


; T.REMOVE(NAME)
; Delete file.
; Return 0=success or -1=failure.

t_remove:
	push    bp
	mov     bp,sp
	mov     ax,$4100        ; DOS: delete
	mov     dx,[bp+4]       ;; file
	int     $21
	jnc     rmok
	mov     ax,-1
	jmps    endremove
rmok:
	xor     ax,ax
endremove:
	pop     bp
	ret

cmp_eq:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jnz     eq1
	dec     dx
eq1:    mov     ax,dx
	jmp     si

cmp_ne:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jz      ne1
	dec     dx
ne1:    mov     ax,dx
	jmp     si

cmp_lt:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jge     lt1
	dec     dx
lt1:    mov     ax,dx
	jmp     si

cmp_gt:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jle     gt1
	dec     dx
gt1:    mov     ax,dx
	jmp     si

cmp_le:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jg      le1
	dec     dx
le1:    mov     ax,dx
	jmp     si


cmp_ge:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jl      ge1
	dec     dx
ge1:    mov     ax,dx
	jmp     si

cmp_ult:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jae     ult1
	dec     dx
ult1:   mov     ax,dx
	jmp     si

cmp_ugt:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jbe     ugt1
	dec     dx
ugt1:   mov     ax,dx
	jmp     si

cmp_ule:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	ja      ule1
	dec     dx
ule1:   mov     ax,dx
	jmp     si


cmp_uge:
	pop     si
	pop     bx
	xor     dx,dx
	cmp     bx,ax
	jb      uge1
	dec     dx
uge1:   mov     ax,dx
	jmp     si

start:
	mov     ax,$FFFE
	mov     sp,ax

	; T3X code starts here ...
end:
